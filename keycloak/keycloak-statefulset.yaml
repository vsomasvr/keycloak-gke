apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  labels:
    app: keycloak
    release: keycloak
  name: keycloak
  namespace: default
spec:
  podManagementPolicy: Parallel
  replicas: 2
  selector:
    matchLabels:
      app: keycloak
      release: keycloak
  serviceName: keycloak-headless
  template:
    metadata:
      labels:
        app: keycloak
        release: keycloak
    spec:
      containers:
      - env:
        - name: PROXY_ADDRESS_FORWARDING
          value: "true"
        - name: KEYCLOAK_USER
          value: kcadmin
        - name: KEYCLOAK_PASSWORD
          valueFrom:
            secretKeyRef:
              key: kc-secret
              name: keycloak-secret
        - name: JGROUPS_DISCOVERY_PROTOCOL
          value: dns.DNS_PING
        - name: JGROUPS_DISCOVERY_PROPERTIES
          value: dns_query=keycloak-headless.default.svc.cluster.local
        - name: DB_VENDOR
          value: postgres
        - name: DB_ADDR
          value: <ip-of-db>
        - name: DB_PORT
          value: "5432"
        - name: DB_DATABASE
          value: keycloak
        - name: DB_USER
          value: keycloak
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: pgdb-secret
              name: keycloak-secret
        image: jboss/keycloak:4.5.0.Final
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /auth/
            port: http
            scheme: HTTP
          initialDelaySeconds: 120
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        name: keycloak
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /auth/
            port: http
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
      dnsPolicy: ClusterFirst
      restartPolicy: Always
