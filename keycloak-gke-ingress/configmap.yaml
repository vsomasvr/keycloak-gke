# Source: keycloak/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: keycloak
  labels:
    app: keycloak
    chart: keycloak-3.4.0
    release: "keycloak"
    heritage: "Tiller"
data:
  keycloak.sh: |
    #!/usr/bin/env bash

    set -eu

    /opt/jboss/keycloak/bin/jboss-cli.sh --file=/scripts/keycloak.cli

    exec /opt/jboss/docker-entrypoint.sh -b 0.0.0.0  --server-config standalone-ha.xml
    exit "$?"

  keycloak.cli: |
    embed-server --server-config=standalone-ha.xml --std-out=echo

    # Makes node identifier unique getting rid of a warning in the logs
    /subsystem=transactions:write-attribute(name=node-identifier, value=${jboss.node.name})


    # Allow log level to be configured via environment variable
    /subsystem=logging/console-handler=CONSOLE:write-attribute(name=level, value=${env.WILDFLY_LOGLEVEL:INFO})
    /subsystem=logging/root-logger=ROOT:write-attribute(name=level, value=${env.WILDFLY_LOGLEVEL:INFO})

    # Log only to console
    /subsystem=logging/root-logger=ROOT:write-attribute(name=handlers, value=[CONSOLE])


    /socket-binding-group=standard-sockets/socket-binding=proxy-https:add(port=443)
    /subsystem=undertow/server=default-server/http-listener=default:write-attribute(name=redirect-socket, value=proxy-https)
    /subsystem=undertow/server=default-server/http-listener=default:write-attribute(name=proxy-address-forwarding, value=true)

    /subsystem=infinispan/cache-container=keycloak/distributed-cache=sessions:write-attribute(name=owners, value=${env.CACHE_OWNERS:2})
    /subsystem=infinispan/cache-container=keycloak/distributed-cache=authenticationSessions:write-attribute(name=owners, value=${env.CACHE_OWNERS:2})
    /subsystem=infinispan/cache-container=keycloak/distributed-cache=offlineSessions:write-attribute(name=owners, value=${env.CACHE_OWNERS:2})
    /subsystem=infinispan/cache-container=keycloak/distributed-cache=loginFailures:write-attribute(name=owners, value=${env.CACHE_OWNERS:2})

    /subsystem=jgroups/stack=tcp:remove()
    /subsystem=jgroups/stack=tcp:add()
    /subsystem=jgroups/stack=tcp/transport=TCP:add(socket-binding="jgroups-tcp")
    /subsystem=jgroups/stack=tcp/protocol=JDBC_PING:add()
    /subsystem=jgroups/stack=tcp/protocol=JDBC_PING/property=datasource_jndi_name:add(value=java:jboss/datasources/KeycloakDS)
    /subsystem=jgroups/stack=tcp/protocol=JDBC_PING/property=clear_table_on_view_change:add(value=true)
    /subsystem=jgroups/stack=tcp/protocol=JDBC_PING/property=break_on_coord_rsp:add(value=true)

    /subsystem=jgroups/stack=tcp/protocol=MERGE3:add()
    /subsystem=jgroups/stack=tcp/protocol=FD_SOCK:add(socket-binding="jgroups-tcp-fd")
    /subsystem=jgroups/stack=tcp/protocol=FD:add()
    /subsystem=jgroups/stack=tcp/protocol=VERIFY_SUSPECT:add()
    /subsystem=jgroups/stack=tcp/protocol=pbcast.NAKACK2:add()
    /subsystem=jgroups/stack=tcp/protocol=UNICAST3:add()
    /subsystem=jgroups/stack=tcp/protocol=pbcast.STABLE:add()
    /subsystem=jgroups/stack=tcp/protocol=pbcast.GMS:add()
    /subsystem=jgroups/stack=tcp/protocol=pbcast.GMS/property=max_join_attempts:add(value=5)
    /subsystem=jgroups/stack=tcp/protocol=MFC:add()
    /subsystem=jgroups/stack=tcp/protocol=FRAG2:add()

    /subsystem=jgroups/channel=ee:write-attribute(name=stack, value=tcp)
    /subsystem=jgroups/stack=udp:remove()
    /socket-binding-group=standard-sockets/socket-binding=jgroups-mping:remove()
    /interface=private:write-attribute(name=nic, value=eth0)
    /interface=private:undefine-attribute(name=inet-address)

    # Statements must be adapted for PostgreSQL. Additionally, we add a 'creation_timestamp' column.
    /subsystem=jgroups/stack=tcp/protocol=JDBC_PING/property=initialize_sql:add(value="CREATE TABLE IF NOT EXISTS JGROUPSPING (own_addr varchar(200) NOT NULL, creation_timestamp timestamp NOT NULL, cluster_name varchar(200) NOT NULL, ping_data bytea, constraint PK_JGROUPSPING PRIMARY KEY (own_addr, cluster_name))")
    /subsystem=jgroups/stack=tcp/protocol=JDBC_PING/property=insert_single_sql:add(value="INSERT INTO JGROUPSPING (own_addr, creation_timestamp, cluster_name, ping_data) values (?, NOW(), ?, ?)")


    stop-embedded-server